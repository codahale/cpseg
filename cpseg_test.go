package cpseg_test

import (
	"crypto/rand"
	"crypto/sha256"
	"math/big"
	"testing"

	"github.com/codahale/cpseg"
)

func TestEncrypt(t *testing.T) {
	priv := cpseg.PrivateKey{
		PublicKey: cpseg.PublicKey{
			Parameters: cpseg.Parameters{
				P:    p,
				G:    g,
				Hash: sha256.New,
			},
		},
	}

	if err := cpseg.GenerateKey(&priv, rand.Reader); err != nil {
		t.Fatal(err)
	}

	Y, R, A, s, err := cpseg.Encrypt(rand.Reader, &priv.PublicKey, []byte("yay for me"))
	if err != nil {
		t.Fatal(err)
	}

	d, err := cpseg.Decrypt(&priv, Y, R, A, s)
	if err != nil {
		t.Fatal(err)
	}

	if string(d) != "yay for me" {
		t.Errorf("Unexpected plaintext: %v", d)
	}
}

func TestEncryptBadData(t *testing.T) {
	priv := cpseg.PrivateKey{
		PublicKey: cpseg.PublicKey{
			Parameters: cpseg.Parameters{
				P:    p,
				G:    g,
				Hash: sha256.New,
			},
		},
	}

	if err := cpseg.GenerateKey(&priv, rand.Reader); err != nil {
		t.Fatal(err)
	}

	Y, R, A, s, err := cpseg.Encrypt(rand.Reader, &priv.PublicKey, []byte("yay for me"))
	if err != nil {
		t.Fatal(err)
	}
	Y.Add(Y, big.NewInt(1))

	d, err := cpseg.Decrypt(&priv, Y, R, A, s)
	if err != cpseg.ErrDecrypt {
		t.Fatalf("Unexpected error: %v", err)
	}
	if d != nil {
		t.Errorf("Unexpected plaintext: %v", d)
	}
}

var (
	// generated via
	p = new(big.Int).SetBytes([]byte{
		0x00, 0xc4, 0x5a, 0xac, 0xed, 0xec, 0xdd, 0x93, 0xde, 0xf4, 0xda, 0x1e,
		0x13, 0x90, 0xfd, 0xb4, 0xf8, 0xa7, 0x7e, 0x5d, 0x74, 0x69, 0xed, 0xb6,
		0x77, 0x2f, 0x9c, 0x87, 0x22, 0x3b, 0x75, 0x0b, 0x34, 0xb3, 0x2b, 0x4a,
		0xfe, 0x7e, 0x86, 0xe3, 0x54, 0x31, 0x34, 0xb1, 0x32, 0x95, 0xfc, 0x34,
		0xf1, 0x4f, 0x3a, 0x99, 0x0b, 0xa3, 0x20, 0xda, 0xec, 0xb2, 0x25, 0x4c,
		0x8d, 0x2d, 0xce, 0x41, 0x53, 0x19, 0xd9, 0xa6, 0x0c, 0xcf, 0xa3, 0x2c,
		0x8e, 0x5e, 0xa0, 0xb4, 0x71, 0x56, 0xce, 0x4a, 0xc1, 0x60, 0x39, 0x38,
		0x21, 0x7f, 0x29, 0x9b, 0x92, 0xba, 0xb7, 0x57, 0x6c, 0x4d, 0x61, 0xbb,
		0x0a, 0x70, 0x7d, 0x38, 0xf3, 0x49, 0x2c, 0xc7, 0x11, 0xbb, 0x37, 0x6a,
		0x28, 0xd7, 0xa9, 0x34, 0x0f, 0x1b, 0xb9, 0xea, 0x6a, 0x13, 0xd1, 0x63,
		0x34, 0x24, 0x3c, 0x5f, 0xac, 0x4a, 0x8c, 0x01, 0xab,
	})
	g = new(big.Int).SetInt64(2)
)
